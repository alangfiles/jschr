let Rom,Utility,fs;_4cc‍.w("./Rom.js",[["Rom",["Rom"],function(v){Rom=v}]]);_4cc‍.w("./Utility.js",[["Utility",["Utility"],function(v){Utility=v}]]);_4cc‍.w("fs",[["default",["fs"],function(v){fs=v}]]);



function generateCHR() {
  const arrayBuffer = fs.readFileSync("./mario.nes");

  const rom = new Rom(arrayBuffer);

  const MemorySize = 8191;

  let chr = [];

  let memoryAddress = 0;

  while (memoryAddress < MemorySize) {
    const firstPlane = [];
    const secondPlane = [];

    //fill up both planes, then put that in the CHR
    while (firstPlane.length < 8) {
      const data = rom.load(memoryAddress);

      if (data) {
        const eightBits = "00000000" + data.toString(2);
        firstPlane.push(eightBits.substr(eightBits.length - 8));
      } else {
        firstPlane.push("00000000");
      }
      memoryAddress++;
    }

    while (secondPlane.length < 8) {
      const data = rom.load(memoryAddress);

      if (data) {
        const eightBits = "00000000" + data.toString(2);
        secondPlane.push(eightBits.substr(eightBits.length - 8));
      } else {
        secondPlane.push("00000000");
      }
      memoryAddress++;
    }

    const combined = Utility.combinePlanes(firstPlane, secondPlane);
    chr.push(combined);
  }

  fs.writeFileSync("./data.txt", JSON.stringify(chr));
  return chr;
}

generateCHR();
